<p> Introduction
JavaScript Can Change HTML Content <br>
One of many JavaScript HTML methods is getElementById().<br>
The example below "finds" an HTML element (with id="demo"), and changes the element content (innerHTML) to "Hello JavaScript":<br>
</p>


<textarea>
In this example JavaScript changes the value of the src (source) attribute of an <img> tag:
</textarea> <br>

<textarea>
document.getElementById("demo").innerHTML = "Hello JavaScript";
</textarea> <br>

<textarea>
document.getElementById("demo").style.fontSize = "35px";
</textarea> <br>

<textarea>
document.getElementById("demo").style.display = "none";
</textarea> <br>

<textarea>
document.getElementById("demo").style.display = "block";
</textarea> <br>




<p> JavaScript Where To
The <script> Tag
In HTML, JavaScript code is inserted between <script> and </script> tags. <br>
</p>

<textarea>
<script>
document.getElementById("demo").innerHTML = "My First JavaScript";
</script>
</textarea> <br>

<p>JavaScript in <head> or <body>
You can place any number of scripts in an HTML document.
Scripts can be placed in the <body>, or in the <head> section of an HTML page, or in both.<br>
</p>

<p>JavaScript in <head>
In this example, a JavaScript function is placed in the <head> section of an HTML page.
The function is invoked (called) when a button is clicked: <br>
</p>

<textarea>
<!DOCTYPE html>
<html>
<head>
<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>
</head>
<body>
<h2>Demo JavaScript in Head</h2>

<p> id="demo">A Paragraph</p>
<button type="button" onclick="myFunction()">Try it</button>

</body>
</html>
</textarea> <br>

<p>JavaScript in <body>
In this example, a JavaScript function is placed in the <body> section of an HTML page.
The function is invoked (called) when a button is clicked: <br>
</p>

<textarea>
<!DOCTYPE html>
<html>
<body>

<h2>Demo JavaScript in Body</h2>

<p> id="demo">A Paragraph</p>

<button type="button" onclick="myFunction()">Try it</button>

<script>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</script>

</body>
</html>
</textarea> <br> 


<p> External JavaScript
Scripts can also be placed in external files: <br>
</p>

<textarea>
function myFunction() {
  document.getElementById("demo").innerHTML = "Paragraph changed.";
}
</textarea> <br>


<p> JavaScript Output

JavaScript Display Possibilities
JavaScript can "display" data in different ways:

*Writing into an HTML element, using innerHTML.
*Writing into the HTML output using document.write().
*Writing into an alert box, using window.alert().
*Writing into the browser console, using console.log(). <br> 
</p>

<Textarea> 
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My First Paragraph</p>

<p id="demo"></p>

<script>
document.getElementById("demo").innerHTML = 5 + 6;
</script>

</body>
</html>
</textarea> </br>

<p> Using document.write()
For testing purposes, it is convenient to use document.write(): <br>
</p>

<textarea>
<!DOCTYPE html>
<html>
<body>

<h1>My First Web Page</h1>
<p>My first paragraph.</p>

<script>
document.write(5 + 6);
</script>

</body>
</html>
<textarea> <br>

<p> You can skip the window keyword.
In JavaScript, the window object is the global scope object. This means that variables, properties, and methods by default belong to the window object. This also means that specifying the window keyword is optional:<br>
</p>

<p>Using console.log()
For debugging purposes, you can call the console.log() method in the browser to display data.<br>
</p>

<p>JavaScript Print
JavaScript does not have any print object or print methods.
You cannot access output devices from JavaScript.
The only exception is that you can call the window.print() method in the browser to print the content of the current window. <br>

<textarea>
<!DOCTYPE html>
<html>
<body>

<button onclick="window.print()">Print this page</button>

</body>
</html>
</textarea> <br>

<p> JavaScript Statements
JavaScript statements are composed of:
Values, Operators, Expressions, Keywords, and Comments.
This statement tells the browser to write "Hello Dolly." inside an HTML element with id="demo":.<br>
</p>

<textarea>
let x, y, z;    // Statement 1
x = 5;          // Statement 2
y = 6;          // Statement 3
z = x + y;      // Statement 4
</textarea> <br> 

<p> JavaScript Programs
A computer program is a list of "instructions" to be "executed" by a computer.
In a programming language, these programming instructions are called statements.
A JavaScript program is a list of programming statements.<br>
</p>

<textarea>
document.getElementById("demo").innerHTML = "Hello Dolly.";
</textarea> <br> 

<p> Semicolons ;
Semicolons separate JavaScript statements.
Add a semicolon at the end of each executable statement:
</p>

<textarea>
let a, b, c;  // Declare 3 variables
a = 5;        // Assign the value 5 to a
b = 6;        // Assign the value 6 to b
c = a + b;    // Assign the sum of a and b to c
</textarea> <br>

<p>JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.
The following lines are equivalent:<br>
</p>

<textarea>
let person = "Hege";
let person="Hege";
<textarea> <br>

<p> JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 characters.
If a JavaScript statement does not fit on one line, the best place to break it is after an operator: <br>
</p>

<textarea>
document.getElementById("demo").innerHTML =
"Hello Dolly!";
<textarea> <br>

<p> JavaScript Code Blocks
JavaScript statements can be grouped together in code blocks, inside curly brackets {...}.
The purpose of code blocks is to define statements to be executed together.
One place you will find statements grouped together in blocks, is in JavaScript functions: <br>
</p>

<textarea>
function myFunction() {
  document.getElementById("demo1").innerHTML = "Hello Dolly!";
  document.getElementById("demo2").innerHTML = "How are you?";
}
</textarea> <br>

<p> JavaScript Keywords
JavaScript statements often start with a keyword to identify the JavaScript action to be performed.
Our Reserved Words Reference lists all JavaScript keywords.
Here is a list of some of the keywords you will learn about in this tutorial:<br>
</p>

<p> Keyword	Description
Keyword	Description
var	Declares a variable
let	Declares a block variable
const	Declares a block constant
if	Marks a block of statements to be executed on a condition
switch	Marks a block of statements to be executed in different cases
for	Marks a block of statements to be executed in a loop
function	Declares a function
return	Exits a function
try	Implements error handling to a block of statements <br>
</p>


<p> JavaScript Syntax <br> 
</p>

<textarea>
// How to create variables:
var x;
let y;

// How to use variables:
x = 5;
y = 6;
let z = x + y;
</textarea> <br>

<p> JavaScript Values
The JavaScript syntax defines two types of values:
Fixed values
Variable values
Fixed values are called Literals.
Variable values are called Variables.<br>
</p>

<p> JavaScript Variables
In a programming language, variables are used to store dataJavaScript Operators values.

JavaScript uses the keywords var, let and const to declare variables.

An equal sign is used to assign values to variables.

In this example, x is defined as a variable. Then, x is assigned (given) the value 6: <br>
</p>

<p> JavaScript Operators
JavaScript uses arithmetic operators ( + - * / ) to compute values:<br>
</p>

<p>JavaScript Expressions
An expression is a combination of values, variables, and operators, which computes to a value.

The computation is called an evaluation.

For example, 5 * 10 evaluates to 50:<br>
</p>

<p>JavaScript Keywords
JavaScript keywords are used to identify actions to be performed.

The let keyword tells the browser to create variables:<br>
</p>

<p>JavaScript Comments
Not all JavaScript statements are "executed".

Code after double slashes // or between /* and */ is treated as a comment.

Comments are ignored, and will not be executed:<br>
</p>

<p> JavaScript is Case Sensitive
All JavaScript identifiers are case sensitive. 

The variables lastName and lastname, are two different variables:<br>
</p>

<textarea>
let lastname, lastName;
lastName = "Doe";
lastname = "Peterson";
<textarea> <br>


<p> JavaScript and Camel Case
Historically, programmers have used different ways of joining multiple words into one variable name:

Hyphens:

first-name, last-name, master-card, inter-city.

Hyphens are not allowed in JavaScript. They are reserved for subtractions.

Underscore:

first_name, last_name, master_card, inter_city.

Upper Camel Case (Pascal Case):

FirstName, LastName, MasterCard, InterCity.


Lower Camel Case:

JavaScript programmers tend to use camel case that starts with a lowercase letter:

firstName, lastName, masterCard, interCity. <br>
</p>

<p> JavaScript Comments
JavaScript comments can be used to explain JavaScript code, and to make it more readable.

JavaScript comments can also be used to prevent execution, when testing alternative code. <br>
</p>

<p>Single Line Comments
Single line comments start with //.

Any text between // and the end of the line will be ignored by JavaScript (will not be executed).

This example uses a single-line comment before each code line:<br>
</p>

<p> Multi-line Comments
Multi-line comments start with /* and end with */.

Any text between /* and */ will be ignored by JavaScript.

This example uses a multi-line comment (a comment block) to explain the code: <br>
</p>

<p> JavaScript Variables
JavaScript Variables can be declared in 4 ways:
Automatically
-Using var
-Using let
-Using const
In this first example, x, y, and z are undeclared variables.
They are automatically declared when first used:<br>
</p>

<textarea>
x = 5;
y = 6;
z = x + y;
</textarea> <br> 

<p> Note
It is considered good programming practice to always declare variables before use.
From the examples you can guess:<br>
</p>

<textarea>
x stores the value 5
y stores the value 6
z stores the value 11
</textarea> <br>

<p>
The two variables price1 and price2 are declared with the const keyword.

These are constant values and cannot be changed.

The variable total is declared with the let keyword.

The value total can be changed.
</p>

<p>JavaScript Let
The let keyword was introduced in ES6 (2015)

Variables declared with let have Block Scope

Variables declared with let must be Declared before use

Variables declared with let cannot be Redeclared in the same scope. <br> 
</p> 

<p> Block Scope
Before ES6 (2015), JavaScript did not have Block Scope.

JavaScript had Global Scope and Function Scope.

ES6 introduced the two new JavaScript keywords: let and const.

These two keywords provided Block Scope in JavaScript: <br> 
</p> 

<textarea>
{
  let x = 2;
}
// x can NOT be used here
</textarea> <br>

<p> Global Scope
Variables declared with the var always have Global Scope.

Variables declared with the var keyword can NOT have block scope:<br>
</p> 

<p> Variables declared with varinside a { } block can be accessed from outside the block: <br>
</p>

<textarea>
{
  var x = 2;
}
// x CAN be used here
</textarea> <br>

<p> Cannot be Redeclared 
Variables defined with let can not be redeclared.

You can not accidentally redeclare a variable declared with let.<br>
</p> 

<textarea>
let x = "John Doe";

let x = 0;
<textarea> <br>

<p> Redeclaring Variables
Redeclaring a variable using the var keyword can impose problems.

Redeclaring a variable inside a block will also redeclare the variable outside the block: <br>
</p>

<textarea>
var x = 10;
// Here x is 10

{
var x = 2;
// Here x is 2
}

// Here x is 2
</textarea> <Br>

<p> Let Hoisting
Variables defined with var are hoisted to the top and can be initialized at any time.

Meaning: You can use the variable before it is declared:<br>
</p>

<textarea>
carName = "Volvo";
var carName;
</textarea> <br> 

<p> JavaScript Const
The const keyword was introduced in ES6 (2015)

Variables defined with const cannot be Redeclared

Variables defined with const cannot be Reassigned

Variables defined with const have Block Scope <br>
</p> 

<p> Cannot be Reassigned
A variable defined with the const keyword cannot be reassigned:<br>
</p>

<textarea>
const PI = 3.141592653589793;
PI = 3.14;      // This will give an error
PI = PI + 10;   // This will also give an error
<textarea> <br>

<p>Must be Assigned
JavaScript const variables must be assigned a value when they are declared:<br> 
</p>

<p> Correct
const PI = 3.14159265359;<br>
</p>

<p>Incorrect
const PI;
PI = 3.14159265359;<br>
</p>

<p>Constant Objects and Arrays
The keyword const is a little misleading.

It does not define a constant value. It defines a constant reference to a value.

Because of this you can NOT:

Reassign a constant value
Reassign a constant array
Reassign a constant object
But you CAN:

Change the elements of constant array
Change the properties of constant object <br>
</p>

<p>Constant Arrays
You can change the elements of a constant array:<br> 
</p>

<textarea>
// You can create a constant array:
const cars = ["Saab", "Volvo", "BMW"];

// You can change an element:
cars[0] = "Toyota";

// You can add an element:
cars.push("Audi");
</textarea> <br>

<p> Constant Objects
You can change the properties of a constant object:<br>
</p>

<textarea> 
// You can create a const object:
const car = {type:"Fiat", model:"500", color:"white"};

// You can change a property:
car.color = "red";

// You can add a property:
car.owner = "Johnson";
</textarea> <br> 

<p>JavaScript Operators

Javascript operators are used to perform different types of mathematical and logical computations. <br>

Examples:
The Assignment Operator = assigns values <br>

The Addition Operator + adds values <br>

The Multiplication Operator * multiplies values <br>

The Comparison Operator > compares values <br>
</p>

<p> JavaScript Assignment
The Assignment Operator (=) assigns a value to a variable: <br>
 
Examples: <br>
	
	let x = 10; <br>
	// Assign the value 5 to x <br>
	let x = 5; <br>
	// Assign the value 2 to y <br>
	let y = 2; <br>
	// Assign the value x + y to z: <br>
	let z = x + y; <br> 
</p>

<p> JavaScript Addition
The Addition Operator (+) adds numbers: <br>

Examples: <br>

let x = 5; <br>
let y = 2; <br>
let z = x + y; <br>
</p>

<p> JavaScript Multiplication
The Multiplication Operator (*) multiplies numbers: <br>

Multiplying: <br>
let x = 5; <br>
let y = 2; <br>
let z = x * y; <br>
</p>

<p> Types of JavaScript Operators <br>
There are different types of JavaScript operators:<br>

Arithmetic Operators <br>
Assignment Operators <br>
Comparison Operators <br>
String Operators <br>
Logical Operators <br>
Bitwise Operators <br>
Ternary Operators <br>
Type Operators <br>
</p>

<p> JavaScript Arithmetic Operators <br>
Arithmetic Operators are used to perform arithmetic on numbers: <br>
Arithmetic Operators Example <br>

let a = 3; <br>
let x = (100 + 50) * a; <br>
</p>

<p> JavaScript Arithmetic Operators <br>
Arithmetic operators perform arithmetic on numbers (literals or variables). <br>


Operator	Description <br>

+	Addition <br>
-	Subtraction <br>
*	Multiplication <br>
**	Exponentiation (ES2016) <br>
/	Division <br>
%	Modulus (Remainder) <br>
++	Increment <br>
--	Decrement <br>
</p>

<p> Arithmetic Operations <br>
A typical arithmetic operation operates on two numbers. <br>

The two numbers can be literals:<br>

Example: <br>
let x = 100 + 50; <br>
or variables: <br>

Example: <br>
let x = a + b; <br>

or expressions: <br>

Example: <br>
let x = (100 + 50) * a; <br>

<p> Operators and Operands <br>
The numbers (in an arithmetic operation) are called operands.<br>

The operation (to be performed between the two operands) is defined by an operator.<br> 

<p> JavaScript Data Types <br>

Examples: <br>
// Numbers:<br>
let weight = 7.5; <br>
// Strings:<br>
let color = "Yellow"; <br>
let lastName = "Johnson"; <br>
// Booleans <br>
let x = true; <br>
let y = false; <br>
// Object: <br>
const person = {firstName:"John", lastName:"Doe"}; <br>
// Array object: <br>
const cars = ["Saab", "Volvo", "BMW"]; <br>
// Date object: <br>
const date = new Date("2022-03-25"); <br>

</p>

<p> Note <br>
A JavaScript variable can hold any type of data.<br>
The Concept of Data Types<br>
In programming, data types is an important concept.<br>
To be able to operate on variables, it is important to know something about the type.<br>
Without data types, a computer cannot safely solve this:
<br>
let x = 16 + "Volvo";<br>
Does it make any sense to add "Volvo" to sixteen? Will it produce an error or will it produce a result?<br>
JavaScript will treat the example above as:<br>
let x = "16" + "Volvo";<br>
Note<br>
When adding a number and a string, JavaScript will treat the number as a string.<br>
Example :<br>
let x = 16 + "Volvo"; <br>
Example: <br>
let x = "Volvo" + 16; <br>
JavaScript evaluates expressions from left to right. Different sequences can produce different results: <br>
JavaScript: <br>
let x = 16 + 4 + "Volvo"; <br>
Result: <br>
20Volvo <br>
JavaScript: <br>
let x = "Volvo" + 16 + 4;<br>
Result: <br>
Volvo164 <br>
In the first example, JavaScript treats 16 and 4 as numbers, until it reaches "Volvo". <br>
In the second example, since the first operand is a string, all operands are treated as strings. <br>

</p>


<p> JavaScript Functions <br>
A JavaScript function is a block of code designed to perform a particular task. <br>
A JavaScript function is executed when "something" invokes it (calls it). <br>
Example:<br>
// Function to compute the product of p1 and p2<br>
function myFunction(p1, p2) {
  return p1 * p2;
}<br>
JavaScript Function Syntax<br>
A JavaScript function is defined with the function keyword, followed by a name, followed by parentheses ().<br>
Function names can contain letters, digits, underscores, and dollar signs (same rules as variables).<br>
The parentheses may include parameter names separated by commas:<br>
(parameter1, parameter2, ...)<br>
The code to be executed, by the function, is placed inside curly brackets: {}<br>
function name(parameter1, parameter2, parameter3) {
  // code to be executed
}<br>
Function parameters are listed inside the parentheses () in the function definition.<br>
Function arguments are the values received by the function when it is invoked.<br>
Inside the function, the arguments (the parameters) behave as local variables.<br>
Function Invocation<br>
The code inside the function will execute when "something" invokes (calls) the function:<br>
When an event occurs (when a user clicks a button)<br>
When it is invoked (called) from JavaScript code<br>
Automatically (self invoked)<br>
You will learn a lot more about function invocation later in this tutorial.<br>
ADVERTISEMENT<br>
Function Return<br>
When JavaScript reaches a return statement, the function will stop executing.<br>
If the function was invoked from a statement, JavaScript will "return" to execute the code after the invoking statement.<br>
Functions often compute a return value. The return value is "returned" back to the "caller":<br>
Example:<br>
Calculate the product of two numbers, and return the result:<br>
// Function is called, the return value will end up in x
let x = myFunction(4, 3);<br>
function myFunction(a, b) {<br>
// Function returns the product of a and b
  return a * b;
}<br>
Why Functions?<br>
With functions you can reuse code<br>
You can write code that can be used many times.<br>
You can use the same code with different arguments, to produce different results.<br>
The () Operator<br>
The () operator invokes (calls) the function:<br>
Example:<br>
Convert Fahrenheit to Celsius:<br>
function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}<br>
let value = toCelsius(77);<br>
Accessing a function with incorrect parameters can return an incorrect answer:<br>
Example:<br>
function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}<br>
let value = toCelsius();<br>
Accessing a function without () returns the function and not the function result:<br>
Example:<br>
function toCelsius(fahrenheit) {
  return (5/9) * (fahrenheit-32);
}<br>
let value = toCelsius;<br>
Note<br>
As you see from the examples above, toCelsius refers to the function object, and toCelsius() refers to the function result.<br>
Functions Used as Variable Values<br>
Functions can be used the same way as you use variables, in all types of formulas, assignments, and calculations.<br>
Example:<br>
Instead of using a variable to store the return value of a function: <br>
let x = toCelsius(77); <br>
let text = "The temperature is " + x + " Celsius";<br>
You can use the function directly, as a variable value:<br>
let text = "The temperature is " + toCelsius(77) + " Celsius";<br>
You will learn a lot more about functions later in this tutorial.<br>
Local Variables<br>
Variables declared within a JavaScript function, become LOCAL to the function.<br>
Local variables can only be accessed from within the function.<br>
Example:<br>
// code here can NOT use carName<br>
function myFunction() {
  let carName = "Volvo";
  // code here CAN use carName}<br>
// code here can NOT use carName<br>
Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.<br>
Local variables are created when a function starts, and deleted when the function is completed.<br>

</p>

<p> JavaScript Objects <br>

Object Properties<br>
A real life car has properties like weight and color:<br>
car.name = Fiat, car.model = 500, car.weight = 850kg, car.color = white.<br>
Car objects have the same properties, but the values differ from car to car.<br>
Object Methods<br>
A real life car has methods like start and stop:<br>
car.start(), car.drive(), car.brake(), car.stop().<br>
Car objects have the same methods, but the methods are performed at different times.<br>
JavaScript Variables<br>
JavaScript variables are containers for data values.<br>
This code assigns a simple value (Fiat) to a variable named car:<br>
Example<br>
let car = "Fiat";<br>
JavaScript Objects<br>
Objects are variables too. But objects can contain many values.<br>
This code assigns many values (Fiat, 500, white) to an object named car:<br>
Example<br>
const car = {type:"Fiat", model:"500", color:"white"};<br>
Note:<br>
It is a common practice to declare objects with the const keyword.<br>
Learn more about using const with objects in the chapter: JS Const.<br>
JavaScript Object Definition<br>
How to Define a JavaScript Object<br>
Using an Object Literal<br>
Using the new Keyword<br>
Using an Object Constructor<br>
JavaScript Object Literal<br>
An object literal is a list of name:value pairs inside curly braces {}.<br>
{firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"}<br>
Note:<br>
name:value pairs are also called key:value pairs.<br>
object literals are also called object initializers.<br>
Creating a JavaScript Object<br>
These examples create a JavaScript object with 4 properties:<br>
Examples:<br>
// Create an Object<br>
const person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
Spaces and line breaks are not important. An object initializer can span multiple lines:<br>
// Create an Object<br>
const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};
This example creates an empty JavaScript object, and then adds 4 properties:<br>
// Create an Object<br>
const person = {};<br>
// Add Properties<br>
person.firstName = "John";<br>
person.lastName = "Doe";<br>
person.age = 50;<br>
person.eyeColor = "blue";<br>
Using the new Keyword<br>
This example create a new JavaScript object using new Object(), and then adds 4 properties:<br>
Example: <br>
// Create an Object<br>
const person = new Object();<br>
// Add Properties<br>
person.firstName = "John";<br>
person.lastName = "Doe";<br>
person.age = 50;<br>
person.eyeColor = "blue";<br>
Note:<br>
